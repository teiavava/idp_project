version: '3'

services:
  gateway-service:
    build: ./ApiGatewayMicroservice
    ports:
        - 3000:80
    environment:
      USERS_SERVICE_API_ROUTE: authentication/api/users
      ADMIN_SERVICE_API_ROUTE: admin/api/phones
    networks:
      - gate

  admin:
    build:
      context: Admin
      dockerfile: Dockerfile
    command: python -u app.py
    container_name: admin
    image: flask
    restart: unless-stopped
    environment:
        APP_ENV: "prod"
        APP_DEBUG: "True"
        NODE_ENV: development
    networks:
      - gate
      - admin

  authentication:
    build:
      context: Authentication
      dockerfile: Dockerfile
    command: python -u app.py
    container_name: authentication
    image: flask
    restart: unless-stopped
    environment:
        APP_ENV: "prod"
        APP_DEBUG: "True"
        NODE_ENV: development
    networks:
        - gate
        - authentication
  io:
    build:
      context: IO
      dockerfile: Dockerfile
    command: python -u app.py
    container_name: io
    image: flask
    restart: unless-stopped
    environment:
      NODE_ENV: development
      APP_ENV: "prod"
      APP_DEBUG: "True"
      # MONGODB_DATABASE: db
      # MONGODB_HOSTNAME: mongodb
      # MONGODB_PORT: 27017
    # env_file:
    #   - .env
    # depends_on:
    #   - mongodb
    networks:
      - authentication
      - database
      - admin

  # mongodb:
  #   image: mongo:3.6.1
  #   container_name: mongodb
  #   restart: unless-stopped
  #   environment:
  #     MONGO_INITDB_DATABASE: db
  #   volumes:
  #     - './data:/data/db'
  #   networks:
  #     - database

  # nginx:
  #   build: ./nginx
  #   container_name: nginx
  #   restart: always
  #   ports:
  #     - 80:80
  #   volumes:
  #     - "~/container_logs/nginx/log:/var/log/nginx"
  #   depends_on:
  #     - authentication
  #   networks:
  #     - frontend

networks:
  gate:
  authentication:
  admin:
  database:
    driver: bridge
